 ------
 Maven Webstart Plugin
 ------
 Jerome Lacoste
 ------
 26 Oct 2005
 ------

Usage Instructions

    This document describes the functionning of the family of mojos that generate a jnlp file, except the jnlp-download-servlet
    mojo which, while related, is slighly different in its configuration.

    Note: The plugin produces its own artifact.


Input/Output

  Here are the list of files/directories you might want to be familiar with before starting to use the plugin.

-------------------------------
  pom.xml                    (configures the webstart plugin)
  src/main/jnlp/template.vm  (template for the jnlp file to be generated.)
  src/main/jnlp/resources/   (location where all resources are taken. All contents are copied into the work directory)

  target/jnlp/               (work directory)
  target/jnlp/*libPath*      (library directory. may be the same as work directory if not configured otherwise.)
  target/jnlp/launch.jnlp    (generated jnlp file. Name is configurable, this is the default)
  target/${artifactId}-${version}.zip (zipped version of the work directory that will be installed in your local repository)
-------------------------------


Functioning

  When invoked, the JnlpMojo will:

  * the webstart plugin works with a project of type pom or jar. It does the following work:

  ** creates the work directory

  ** copy the resources

  ** copy the jars marked as dependencies into the working directory (if necessary)

  ** sign the jars using an existing (or on-the-fly created) keystore file

  ** if required, use pack200 algorithm to create packed and packed gzipped versions of the jars

  ** generates a jnlp file

  * in the future, it may also generate other files: version.xml, index.html,...

  * the plugin creates a zip out of the resulting files (if we are inside a war packaging, we could do the things automatically)

  * if one needs to package several webstart projects together into a bigger webapp, one should create a particular assembly project. Adding the jnlp-servlet should be done there.


JNLP file generation

    The JNLP file is generated by taking a user specified file in which some variables are filled in by the plugin.
    The user specified file looks thus very similarly to a final JNLP file. Examples of template files can be taken from under {{{http://svn.mojo.codehaus.org/browse/mojo/trunk/mojo/webstart-maven-plugin/plugin/src/test/projects/}src/test/projects/}}.
    Thanks to Velocity we parse the template without affecting things that are intended to work with the jnlp-servlet (e.g. $$codebase).
    The following values are parsed:

-------------------------------
$dependencies
$mainClass
$outputFile             from user input if specified, default otherwise (one can use $$name when using the JnlpDownloadServlet)
$project                maps to the Project Model (i.e. POM) (can be used to retrieve project.Name, project.Version, etc..)
$property               all properties taken from the POM/profile or from the Java System properties. Note: properties containing dots ('.') might not be passed properly. This is due to the nature of the Velocity parser which treats dots as delimiters.
## some aliases named after the JNLP file structure
$informationTitle       alias for $project.Name
$informationDescription alias for $project.Description
$informationVendor      alias for $project.Organization.Name
$informationHomepage    alias for $project.Organization.Url
## explicit timestamps for use with JnlpDownloadServlet (see JnlpDownloadServlet Guide at http://java.sun.com/j2se/1.5.0/docs/guide/javaws/developersguide/downloadservletguide.html#processing)
$explicitTimestamp      explicit timestamp in local time zone, for example "TS: 2007-06-19 18:09:56+0300"
$explicitTimestampUTC   explicit timestamp in UTC time zone, for example "TS: 2007-06-19 15:09:56Z"
-------------------------------
  See the {{{http://velocity.apache.org/engine/releases/velocity-1.5/user-guide.html#variables}Velocity User Guide}} for 
  more information on how to retrieve fields from the Maven POM.

  Note: that the template generation doesn't know if a placeholder was not replaced. So if you put a $outputFile in
  your velocity template, but forget to specify the <outputFile> element in your plugin configuration in the pom.xml,
  there won't (currently) be a failure.


Plugin configuration

  Here's a full example of a pom used to generate a webstart application.

-------------------------------
<!-- Test war project which signs a dependency and it's runtime dependencies. -->
<project>
  <modelVersion>4.0.0</modelVersion>
  <artifactId>jar-mng-1130-1</artifactId>
  <groupId>org.apache.maven.plugins</groupId>
  <version>1.0</version>
  <packaging>pom</packaging>  <!-- pom when you project doesn't contain sources, jar otherwise -->
  <name>Test Case for MNG-1130</name>
  <build>
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>webstart-maven-plugin</artifactId>
        <executions>
           <execution>
              <goals>
                 <goal>jnlp</goal> <!-- use jnlp, jnlp-inline or jnlp-single as appropriate -->
              </goals>
           </execution>
        </executions>
        <configuration>
           <!--outputDirectory></outputDirectory--> <!-- not required?? -->

           <!-- The path where the libraries are stored within the jnlp structure. not required. by default the libraries are within the working directory -->
           <libPath>lib</libPath>

           <!-- [optional] transitive dependencies filter - if omitted, all transitive dependencies are included -->
           <dependencies>
             <!-- Note that only groupId and artifactId must be specified here. because of a limitation of the Include/ExcludesArtifactFilter -->
             <includes>
                <include>commons-logging:commons-logging</include>
                <include>commons-cli:commons-cli</include>
             </includes>
             <!-- excludes>
                <exclude></exclude>
             <excludes-->
           </dependencies>

           <!--resourcesDirectory>${project.basedir}/src/main/jnlp/resources</resourcesDirectory--> <!-- default value -->

           <!-- JNLP generation -->
           <jnlp>
             <!-- default values -->
             <!--inputTemplateResourcePath>${project.basedir}</inputTemplateResourcePath-->
             <!--inputTemplate>src/main/jnlp/template.vm</inputTemplate--> <!-- relative to inputTemplateResourcePath -->
             <outputFile>app.jnlp</outputFile> <!-- defaults to launch.jnlp -->

             <!-- used to automatically identify the jar containing the main class. -->
             <!-- this is perhaps going to change -->
             <mainClass>org.apache.commons.cli.BasicParser</mainClass>
           </jnlp>


           <!-- SIGNING -->
           <!-- defining this will automatically sign the jar and its dependencies, if necessary -->
           <sign>
             <keystore>fillme</keystore>
             <keypass>fillme</keypass>  <!-- we need to override passwords easily from the command line. ${keypass} -->
             <storepass>fillme</storepass> <!-- ${storepass} -->
             <!--storetype>fillme</storetype-->
             <alias>fillme</alias>

             <!--validity>fillme</validity-->

             <!-- only required for generating the keystore -->
             <!--dnameCn>fillme</dnameCn>
             <dnameOu>fillme</dnameOu>
             <dnameO>fillme</dnameO>
             <dnameL>fillme</dnameL>
             <dnameSt>fillme</dnameSt>
             <dnameC>fillme</dnameC-->

             <verify>true</verify> <!-- verify that the signing operation succeeded -->

             <!-- KEYSTORE MANGEMENT -->
             <keystoreConfig>
               <delete>true</delete> <!-- delete the keystore -->
               <gen>true</gen>       <!-- optional shortcut to generate the store. -->
             </keystoreConfig>
           </sign>

           <!-- BUILDING PROCESS -->

           <pack200>true</pack200>
           <gzip>true</gzip> <!-- default force when pack200 false, true when pack200 selected ?? -->

           <!-- causes a version attribute to be output in each jar resource element, optional, default is false -->
           <outputJarVersions>true</outputJarVersions>

           <!--install>false</install--> <!-- not yet supported -->
           <verbose>true</verbose>

        </configuration>
      </plugin>
    </plugins>
  </build>
  <dependencies>
    <dependency>
      <groupId>commons-logging</groupId>
      <artifactId>commons-logging</artifactId>
      <version>1.0.4</version>
    </dependency>
    <dependency>
      <groupId>commons-cli</groupId>
      <artifactId>commons-cli</artifactId>
      <version>1.0</version>
    </dependency>
  </dependencies>
</project>
-------------------------------


Optimizations

   Unnecessary signing of jar files can slow down the build. The plugin tries to reduce the number of
   operations to perform, so it will only resign/repack the JAR files that have changed since
   the last run. In consequence, if you change your signing key or your POM, it will be necessary
   for you to clean your project before rebuilding. Otherwise strange results may happen.
