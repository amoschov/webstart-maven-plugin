 ------
 Maven Webstart Plugin
 ------
 Jerome Lacoste
 ------
 26 Oct 2005
 ------

Maven Webstart Plugin - How-to

Important notice

  The plugin produces its own artifact. As maven recommends, you should use create a single artifact per module. Trying to do otherwise is not supported in this plugin. In fact, today it doesn't work.

  If you try to do something like:

------------------------------
mvn install webstart:jnlp
------------------------------

  You will probably have a build failure. Example:

------------------------------- 
[INFO] ------------------------------------------------------------------------
[ERROR] BUILD ERROR
[INFO] ------------------------------------------------------------------------
[INFO] Failure to run the plugin:
Embedded error: artifact <yourgroupid>:<yourartifactid>:<yourpackaging>:<yourversion> has no matching file, why? Check the logs...
-------------------------------

  We may fix that in the future, but today it's not in our plan. If you feel otherwise, please vote on 
  {{{http://jira.codehaus.org/browse/MOJO-369} MOJO-369}}.

  The workaround is to use a multi-project setup.


Input/Output

  Here are the list of files/directories you might want to be familiar with before starting to use the plugin.

-------------------------------
  pom.xml                    (configures the webstart plugin)
  src/jnlp/template.vm       (template for the jnlp file to be generated.)
  src/jnlp/resources/        (location where all resources are taken. All contents are copied into the work directory)

  target/jnlp/               (work directory)
  target/jnlp/launch.jnlp    (generated jnlp file. Name is configurable, this is the default)
  target/${artifactId}-${version}.zip (zipped version of the work directory that will be installed in your local repository)
-------------------------------


Functionning

  When invoked the JnlpMojo will:

  * the webstart plugin works with a project of type pom. It does the following work:

  ** creates the work directory

  ** copy the resources

  ** copy the jars marked as dependencies into the working directory (if necessary)

  ** sign the jars using an existing (or on-the-fly created) keystore file

  ** if required, use pack200 algorithm to create packed and packed gzipped versions of the jars

  ** generates a jnlp file

  * in the future, it may also generate other files: version.xml, index.html,...

  * the plugin creates a zip out of the resulting files (if we are inside a war packaging, we could do the things automatically)

  * if one needs to package several webstart projects together into a bigger webapp, one should create a particular assembly project. Adding the jnlp-servlet should be done there.


JNLP file generation

    Thanks to velocity we parse the template without affecting things that are intended to work with the jnlp-servlet (e.g. $$codebase).
    The following values are parsed:

-------------------------------
$dependencies
$mainClass
$outputFile       from user input if specified, default otherwise (one can use $$name when using the JnlpDownloadServlet)
$project.version  taken from POM
$project.name     taken from POM
$property         all properties taken from the POM/profile or from the Java System properties
-------------------------------

  Note: that the template generation doesn't know if a placeholder was not replaced. So if you put a $outputFile in
  your velocity template, but forget to specify the <outputFile> element in your plugin configuration in the pom.xml,
  there won't (currently) be a failure.


Plugin configuration

  Here's a full example of a pom used to generate a webstart application.

-------------------------------
<!-- Test war project which signs a dependency and it's runtime dependencies. -->
<project>
  <modelVersion>4.0.0</modelVersion>
  <artifactId>jar-mng-1130-1</artifactId>
  <groupId>org.apache.maven.plugins</groupId>
  <version>1.0</version>
  <packaging>pom</packaging>
  <name>Test Case for MNG-1130</name>
  <build>
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>webstart-maven-plugin</artifactId>
        <executions>
           <execution>
              <goals>
                 <goal>jnlp</goal>
              </goals>
           </execution>
        </executions>
        <configuration>
           <!--outputDirectory></outputDirectory--> <!-- not required?? -->

           <!-- transitive dependencies filter -->
           <dependencies>
             <!-- Note that only groupId and artifactId must be specified here. because of a limitation of the Include/ExcludesArtifactFilter -->
             <includes>
                <include>commons-logging:commons-logging</include>
                <include>commons-cli:commons-cli</include>
             <includes>
             <!-- excludes>
                <exclude></exclude>
             <excludes-->
           </dependencies>

           <!-- JNLP generation -->
           <jnlp>
             <!-- default values -->
             <!--resources>${project.basedir}/src/main/jnlp</resources-->
             <!--inputTemplateResourcePath>${project.basedir}</inputTemplateResourcePath-->
             <!--inputTemplate>src/jnlp/template.vm</inputTemplate--> <!-- relative to inputTemplateResourcePath -->
             <outputFile>app.jnlp</outputFile> <!-- defaults to launch.jnlp -->

             <!-- used to automatically identify the jar containing the main class. -->
             <!-- this is perhaps going to change -->
             <mainClass>org.apache.commons.cli.BasicParser</mainClass>
           </jnlp>


           <!-- SIGNING -->
           <!-- defining this will automatically sign the jar and its dependencies, if necessary -->
           <sign>
             <keystore></keystore>
             <keypass></keypass>  <!-- we need to override passwords easily from the command line. ${keypass} -->
             <storepass></storepass> <!-- ${storepass} -->
             <storetype></storetype>
             <alias></alias>
             <validity></validity>

             <dnameCn></dnameCn>
             <dnameOu></dnameOu>
             <dnameO></dnameO>
             <dnameL></dnameL>
             <dnameSt></dnameSt>
             <dnameC></dnameC>

             <verify>true</verify>
           </sign>

           <!-- KEYSTORE MANGEMENT -->
           <keystore>
             <delete>true</delete> <!-- delete the keystore -->
             <gen>true</gen>       <!-- optional shortcut to generate the store. -->
           </keystore>

           <!-- BUILDING PROCESS -->
           <!--usejnlpservlet>true</usejnlpservlet--> <!-- not yet supported -->

           <!-- should we have some more configurations here? E.g. compression level (aka packing effort) -->
           <!-- not yet implemented -->
           <pack200>true</pack200>
           <gzip>true</gzip> <!-- default force when pack200 false, true when pack200 selected ?? -->

           <!-- misc -->
           <!-- if there are multiple apps, do we need to mark one as default? (app/ redirects to app/default.jnlp in jnlp servlet ??)-->
           <!-- -->

           <!--install>false</install--> <!-- not yet supported -->
           <verbose>true</verbose>

        </configuration>
      </plugin>
    </plugins>
  </build>
  <dependencies>
    <dependency>
      <groupId>commons-logging</groupId>
      <artifactId>commons-logging</artifactId>
      <version>1.0.4</version>
    </dependency>
    <dependency>
      <groupId>commons-cli</groupId>
      <artifactId>commons-cli</artifactId>
      <version>1.0</version>
    </dependency>
  </dependencies>
</project>
-------------------------------


Notes

* Optimizations: unecessary signing can slow down the build. The plugin tries to reduce the number of operations to perform, so it only resign/repack the JAR files that have changed since the last run. In consequence, if you change your signing key or your POM, it is required for you to clean your project before rebuilding. Otherwise strange results may happen.


Use Cases

* single webstart app, no webapp (static web site)

  Use the plugin as described above. It will generate and install a zip in your local repository.

* single and multiple webstart app, bundle inside a 'pom project', without jnlp-servlet support

** One way of doing it


   * Place your webstart application in a project. This project uses the webstart
     plugin to generate the zip file containing the webstart bundle. The bundle is
     installed in the local repository.

   * The webapp is maintained in a separate project, the artifact that this project
     produces is a war file.

   * Use the Codehaus dependency plugin in your webapp project to unpack the webstart
     bundle into the webapp folder. The webstart application will then be bundled
     and deployed onto your webserver as part of the webapp.
      
   * You can deploy multiple webstart applications into the same webapp by using
     multiple executions of the dependency plugin.

  E.g.

-------------------------------
jnlp-project1/pom.xml - pom packaging. Uses webstart plugin to package the generated files into a zip
jnlp-project2/pom.xml - pom packaging. Uses webstart plugin to package the generated files into another zip
webapp-bundle/pom.xml - war packaging. Unpack zips and bundle war.
-------------------------------

 Placing this plugin configuration inside the pom.xml that generates your webapp's war
 file will result in your webstart application being placed in the /webstart directory
 of your web application.

-------------------------------
    <build>
        <plugins>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>dependency-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <!-- 
                            Copy the webstart bundle in as a resource
                            before packaging starts.
                        -->
                        <phase>process-resources</phase>
                        <goals>
                            <goal>unpack</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <artifactItems>
                        <artifactItem>
                            <groupId>your webstart artifact's groupId</groupId>
                            <artifactId>your webstart artifact's artifactId</artifactId>
                            <version>your webstart artifact's version (possibly SNAPSHOT)</version>
                            <type>zip</type>                            
                        </artifactItem>
                    </artifactItems>
                    <outputDirectory>${project.build.directory}/${project.build.finalName}/webstart</outputDirectory>
                </configuration>
            </plugin>
        </plugins>
    </build>
-------------------------------


** Another way way of doing it

    * place each of your webstart app in a particular project

    * use webstart plugin as shown above to generate and install the zip in the local repository

    * generate your webapp using a project with war packaging

    * use a project to combine the war + n zip files

  E.g.

-------------------------------
jnlp-project1/pom.xml - pom packaging. Uses webstart plugin to package the generated files into a zip
jnlp-project2/pom.xml - pom packaging. Uses webstart plugin to package the generated files into another zip
webapp/pom.xml        - war packaging. Creates a war file.
webapp-bundle/pom.xml - pom packaging. Uses user defined assembly to combines the jnlp-project* resulting zip and the war into its own war.
-------------------------------

  In webapp-bundle:

-------------------------------
<?xml version="1.0"?>
<project>
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>yourproject</groupId>
    <artifactId>project-parent</artifactId>
    <version>1.0-SNAPSHOT</version>
  </parent>
  <artifactId>full-webapp</artifactId>
  <packaging>pom</packaging>
  <name>Project Full WebApp</name>
  <description>Webapp + Webstart Clients</description>
  <dependencies>

    <dependency>
      <groupId>yourproject</groupId>
      <artifactId>webapp</artifactId>
      <version>${version}</version>
      <type>war</type>
    </dependency>

    <dependency>
      <groupId>yourproject</groupId>
      <artifactId>clients-webstart-1</artifactId>
      <version>${version}</version>
      <type>zip</type>
    </dependency>

    <dependency>
      <groupId>yourproject</groupId>
      <artifactId>clients-webstart-2</artifactId>
      <version>${version}</version>
      <type>zip</type>
    </dependency>

    <dependency> <!-- required to support MNG-1274 -->
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-archiver</artifactId>
      <version>1.0-alpha-4-SNAPSHOT</version>
    </dependency>

  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-assembly-plugin</artifactId>
        <version>2.1-SNAPSHOT</version>
        <executions>
           <execution>
             <phase>verify</phase> <!-- FIXME should be package, but inifinte loop see MNG-1311 -->
             <goals><goal>assembly</goal></goals>
           </execution>
        </executions>
        <configuration>
          <descriptor>src/assemble/main.xml</descriptor>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>
-------------------------------

  and

-------------------------------
<assembly>
  <id>main</id>
  <formats>
    <format>war</format>
  </formats>
  <includeBaseDirectory>false</includeBaseDirectory>
  <dependencySets>
    <dependencySet>
      <outputDirectory>/</outputDirectory>
      <includes>
        <include>yourproject:webapp</include>
      </includes>
      <unpack>true</unpack>
      <scope>runtime</scope>
    </dependencySet>
    <dependencySet>
      <outputDirectory>ws1</outputDirectory>
      <includes>
        <include>yourproject:clients-webstart-1</include>
      </includes>
      <unpack>true</unpack>
      <scope>runtime</scope>
    </dependencySet>
    <dependencySet>
      <outputDirectory>ws1</outputDirectory>
      <includes>
        <include>yourproject:clients-webstart-2</include>
      </includes>
      <unpack>true</unpack>
      <scope>runtime</scope>
    </dependencySet>
    <!--dependencySet> NOT YET IN IBIBLIO
      <outputDirectory>WEB-INF/lib</outputDirectory>
      <includes>
        <include>com.sun.java.jnlp:jnlp-servlet</include>
      </includes>
      <scope>runtime</scope>
    </dependencySet-->
  </dependencySets>
</assembly>
-------------------------------


* single and multiple webstart app, bundle inside a 'war project', without jnlp-servlet support

** One way of doing it:

    * place each of your webstart app in a particular project

    * use webstart plugin as shown above to generate and install the zip in the local repository

    * generate your webapp using a project with war packaging, but be sure to unzip the webstart applications zip in the webstart working directory.
      I've not implemented this. I don't think it is possible to use the assembly plugin without specifying any format. So not sure how the layout preparation would work

  E.g.

-------------------------------
jnlp-project1/pom.xml - pom packaging. Uses webstart plugin to package the generated files into a zip
jnlp-project2/pom.xml - pom packaging. Uses webstart plugin to package the generated files into another zip
webapp/pom.xml        - war packaging. Creates a war file after unzipping the zips in the correct place.
-------------------------------
