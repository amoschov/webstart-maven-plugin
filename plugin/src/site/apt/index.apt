   ------
   Introduction
   ------
   TBC
   ------
   23 April 2007
   ------


Maven Webstart Plugin

  The Webstart plugin performs many of the tasks required for the creation
  of an application bundle that can be deployed via Web Start. For example, it handles 
  the generation of a JNLP file that contains references to jar resources declared as project
  dependencies in a Maven project pom.xml file. It also performs jar signing and Pack200 compression 
  if desired. It also helps deploying the webstart application using the Java Download Servlet.

  Although not yet 1.0, the plugin is approaching maturity and has been used by many people. Over 15 people have sent contributions. It requires maven 2 (version 2.0.5 or later) to work correctly.

* Goals Overview

  General Information about the goals.

  * {{{jnlp-mojo.html}webstart:jnlp}}, {{{jnlp-inline-mojo.html}webstart:jnlp-inline}} and {{{jnlp-single-mojo.html}webstart:jnlp-single}} all help package a JNLP application. Pick the right mojo depending on your use case: multi-module, command line, etc... (FIXME add a note on how to choose between each other).
  
  * {{{jnlp-download-servlet-mojo.html}webstart:jnlp-download-servlet}} help to package a JNLP application to use with the Jnlp DownloadServlet

  * {{{jnlp-mojo.html}webstart:unsign}} Unsign a jar. This will probably move to the maven-jar-plugin in the future, as did the sign jar functionality.

  * {{{jnlp-mojo.html}webstart:report}} Creates a JNLP report.


* Usage

  Instructions on how to use the Maven Webstart Plugin can be found {{{usage.html}here}}.

* Jnlp Download Servlet mojo vs the others

  The Jnlp Download Servlet mojo is similar to the 3 other JNLP mojos, but has a slighly different configuration file format.

** main differences with the other mojos		

  * The Jnlp Download Servlet mojo supports many applications at once (support for the other JNLP mojos is planned: {{{http://jira.codehaus.org/browse/MWEBSTART-58} MWEBSTART-58}})

  * The Jnlp Download Servlet mojo configuration format is slighly more complex but also more flexible when it comes to selection of dependencies to include in the applications.

  * The Jnlp Download Servlet mojo functionality is only available in one mojo (The JnlpMojo has 3 mojos to cover various use cases, multi-module, command line, etc...) 

* Examples

  To provide you with a better understanding of some usages of the Webstart Plugin,
  you can take a look into the following examples:

  * {{{examples/single_webstart_app.html}Build a standalone Webstart bundle artifact}}.

  * {{{examples/war_bundle_1.html}WAR Bundle #1}}
  
  * {{{examples/war_bundle_2.html}WAR Bundle #2}}

  * {{{examples/simple_jnlp_download_servlet.html}Simple Jnlp Download Servlet}}
 
  * {{{examples/Advanced_jnlp_download_servlet.html}Advanced Jnlp Download Servlet}}

* Features:

   * JNLP file generation where information is inserted into a user
     defined {{{http://velocity.apache.org/}Velocity template}}. Inbuilt default templates.

   * transitive dependencies
   
      * possibilities to include/exclude dependencies

   * key generation (thanks to the {{{http://mojo.codehaus.org/keytool-maven-plugin/} keytool-maven-plugin}})

   * jar signing and signing verification

   * unsign already signed jars

   * pack200 support for compressed versions of the jar files resulting in
     faster network downloads of your webstart application.

   * pluggable API for jar signer


* Upcoming changes

  * {{{http://jira.codehaus.org/browse/MWEBSTART-58} MWEBSTART-58}}

* Reported missing features

   * more support for standalone webstart apps (e.g. download.html/index.html)

   * handling of native libraries

   * ability to launch the application

   * building multiple jnlp app in one zip using one m2 project?? (not sure as this is not a very maven way of doing things)

      * would require merging version.xml

   * what about deploying multiple versions of the same app? Is that ever wanted, e.g. for upgrades?

   * ?? add a new goal to help deal with web applications

      * one step war+webstart generation (one project, webstart plugin used in pre-package phase)

      * more war integration (jnlp, web.xml)

 The plugin can be used to prepare standalone webstart applications or webstart app bundled in war files.

* Links

  * {{{http://docs.codehaus.org/display/MOJO/Webstart+Plugin} confluence wiki page for the plugin}}

  * {{{http://sun-jnlp-servlet.dev.java.net/} http://sun-jnlp-servlet.dev.java.net/}}

  * {{{http://deployment.dev.java.net/} http://deployment.dev.java.net/}}
