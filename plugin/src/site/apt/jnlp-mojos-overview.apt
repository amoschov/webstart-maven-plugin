 ------
 Maven Webstart Plugin
 ------
 Jerome Lacoste
 ------
 26 Oct 2005
 ------

Jnlp mojos overview

    This document describes the functionning of the family of mojos that generate jnlp files, and provide configuration overview.

    Note: The plugin produces its own artifact.

* Jnlp Download Servlet mojo vs the others

  The Jnlp Download Servlet mojo is similar to the 3 other JNLP mojos, but has a slighly different configuration file format.

** main differences with the other mojos		

  * The Jnlp Download Servlet mojo supports many applications at once (support for the other JNLP mojos is planned: {{{http://jira.codehaus.org/browse/MWEBSTART-58} MWEBSTART-58}})

  * The Jnlp Download Servlet mojo configuration format is slighly more complex but also more flexible when it comes to selection of dependencies to include in the applications.

  * The Jnlp Download Servlet mojo functionality is only available in one mojo (The JnlpMojo has 3 mojos to cover various use cases, multi-module, command line, etc...) 

  Note: in the future, we will work to make the 2 mojos configuration more similar as to ease going from simple projects) to those using DownloadServlet.


Input/Output

  Here are the list of files/directories you might want to be familiar with before starting to use the plugin.

-------------------------------
  pom.xml                    (configures the webstart plugin)
  src/main/jnlp/template.vm  (template for the jnlp file to be generated.)
  src/main/jnlp/resources/   (location where all resources are taken. All contents are copied into the work directory)

  target/jnlp/               (work directory)
  target/jnlp/*libPath*      (library directory. may be the same as work directory if not configured otherwise.)
  target/jnlp/launch.jnlp    (generated jnlp file. Name is configurable, this is the default)
  target/jnlp/version.xml    (generated version.xml. Used by the Download Servlet)
  target/${artifactId}-${version}.zip (zipped version of the work directory that will be installed in your local repository)
-------------------------------


Functioning

  When invoked, the mojos will:

  * creates the work directory

  * copy the resources

  * copy the jars marked as dependencies into the working directory (if necessary)

  * unsign signed dependencies if requested

  * sign the jars using an existing (or on-the-fly created) keystore file

  * if required, use pack200 algorithm to create packed and packed gzipped versions of the jars

  * generate a jnlp file

  * generate a version.xml (when using the download servlet mojo)

  * the plugin creates a zip out of the resulting files


* Optimizations

   Unnecessary signing of jar files can slow down the build. The plugin tries to reduce the number of
   operations to perform, so it will only resign/repack the JAR files that have changed since
   the last run. In consequence, if you change your signing key or your POM, it will be necessary
   for you to clean your project before rebuilding. Otherwise strange results may happen.

JNLP file generation

    The JNLP file is generated by taking a user specified file in which some variables are filled in by the plugin.
    The plugin comes with default {{{examples/inbuilt_templates.html}inbuilt jnlp templates}}, different for the jnlp mojo and the jnlp-download-servlet one.

    The templates are built using {{{http://velocity.apache.org/engine/}Velocity}}, so they look very similarly to a final JNLP file. Examples of template files can be taken from under {{{http://svn.mojo.codehaus.org/browse/mojo/trunk/mojo/webstart-maven-plugin/plugin/src/test/projects/}src/test/projects/}}.

    The following values are parsed and replaced:

-------------------------------
$dependencies
$mainClass
$outputFile             from user input if specified, default otherwise (one can use $$name when using the JnlpDownloadServlet)
$project                maps to the Project Model (i.e. POM) (can be used to retrieve project.Name, project.Version, etc..)
$property               all properties taken from the POM/profile or from the Java System properties. Note: properties containing dots ('.') might not be passed properly. This is due to the nature of the Velocity parser which treats dots as delimiters.
## some aliases named after the JNLP file structure
$informationTitle       alias for $project.Name
$informationDescription alias for $project.Description
$informationVendor      alias for $project.Organization.Name
$informationHomepage    alias for $project.Organization.Url
## explicit timestamps for use with JnlpDownloadServlet (see JnlpDownloadServlet Guide at http://java.sun.com/j2se/1.5.0/docs/guide/javaws/developersguide/downloadservletguide.html#processing)
$explicitTimestamp      explicit timestamp in local time zone, for example "TS: 2007-06-19 18:09:56+0300"
$explicitTimestampUTC   explicit timestamp in UTC time zone, for example "TS: 2007-06-19 15:09:56Z"
-------------------------------
  See the {{{http://velocity.apache.org/engine/releases/velocity-1.5/user-guide.html#variables}Velocity User Guide}} for 
  more information on how to retrieve fields from the Maven POM.

  Note: that the template generation doesn't know if a placeholder was not replaced. So if you put a $outputFile in
  your velocity template, but forget to specify the <outputFile> element in your plugin configuration in the pom.xml,
  there won't (currently) be a failure.


Jnlp mojo plugin configuration overview

  Here's a full example of a pom used to generate a webstart application bundle.

-------------------------------
<!-- Test war project which signs a dependency and it's runtime dependencies. -->
<project>
  <modelVersion>4.0.0</modelVersion>
  <artifactId>jar-mng-1130-1</artifactId>
  <groupId>org.apache.maven.plugins</groupId>
  <version>1.0</version>
  <packaging>pom</packaging>  <!-- pom when you project doesn't contain sources, jar otherwise -->
  <name>Test Case for MNG-1130</name>
  <build>
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>webstart-maven-plugin</artifactId>
        <executions>
           <execution>
              <goals>
                 <goal>jnlp</goal> <!-- use jnlp, jnlp-inline or jnlp-single as appropriate -->
              </goals>
           </execution>
        </executions>
        <configuration>
           <!--outputDirectory></outputDirectory--> <!-- not required?? -->

           <!-- The path where the libraries are stored within the jnlp structure. not required. by default the libraries are within the working directory -->
           <libPath>lib</libPath>

           <!-- [optional] transitive dependencies filter - if omitted, all transitive dependencies are included -->
           <dependencies>
             <!-- Note that only groupId and artifactId must be specified here. because of a limitation of the Include/ExcludesArtifactFilter -->
             <includes>
                <include>commons-logging:commons-logging</include>
                <include>commons-cli:commons-cli</include>
             </includes>
             <!-- excludes>
                <exclude></exclude>
             <excludes-->
           </dependencies>

           <!--resourcesDirectory>${project.basedir}/src/main/jnlp/resources</resourcesDirectory--> <!-- default value -->

           <!-- JNLP generation -->
           <jnlp>
             <!-- default values -->
             <!--inputTemplateResourcePath>${project.basedir}</inputTemplateResourcePath-->
             <!--inputTemplate>src/main/jnlp/template.vm</inputTemplate--> <!-- relative to inputTemplateResourcePath -->
             <outputFile>app.jnlp</outputFile> <!-- defaults to launch.jnlp -->

             <!-- used to automatically identify the jar containing the main class. -->
             <!-- this is perhaps going to change -->
             <mainClass>org.apache.commons.cli.BasicParser</mainClass>
           </jnlp>


           <!-- SIGNING -->
           <!-- defining this will automatically sign the jar and its dependencies, if necessary -->
           <sign>
             <keystore>fillme</keystore>
             <keypass>fillme</keypass>  <!-- we need to override passwords easily from the command line. ${keypass} -->
             <storepass>fillme</storepass> <!-- ${storepass} -->
             <!--storetype>fillme</storetype-->
             <alias>fillme</alias>

             <!--validity>fillme</validity-->

             <!-- only required for generating the keystore -->
             <!--dnameCn>fillme</dnameCn>
             <dnameOu>fillme</dnameOu>
             <dnameO>fillme</dnameO>
             <dnameL>fillme</dnameL>
             <dnameSt>fillme</dnameSt>
             <dnameC>fillme</dnameC-->

             <verify>true</verify> <!-- verify that the signing operation succeeded -->

             <!-- KEYSTORE MANGEMENT -->
             <keystoreConfig>
               <delete>true</delete> <!-- delete the keystore -->
               <gen>true</gen>       <!-- optional shortcut to generate the store. -->
             </keystoreConfig>
           </sign>

           <!-- BUILDING PROCESS -->

           <pack200>true</pack200>
           <gzip>true</gzip> <!-- default force when pack200 false, true when pack200 selected ?? -->

           <!-- causes a version attribute to be output in each jar resource element, optional, default is false -->
           <outputJarVersions>true</outputJarVersions>

           <!--install>false</install--> <!-- not yet supported -->
           <verbose>true</verbose>

        </configuration>
      </plugin>
    </plugins>
  </build>
  <dependencies>
    <dependency>
      <groupId>commons-logging</groupId>
      <artifactId>commons-logging</artifactId>
      <version>1.0.4</version>
    </dependency>
    <dependency>
      <groupId>commons-cli</groupId>
      <artifactId>commons-cli</artifactId>
      <version>1.0</version>
    </dependency>
  </dependencies>
</project>
-------------------------------

Jnlp download servlet mojo plugin configuration overview

  Here's a full example of a pom used to generate a webstart application bundle compatible with the Jnlp DownloadServlet

-------------------------------
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.codehaus.mojo.webstart.it003</groupId>
    <artifactId>webstart-it003-parent</artifactId>
    <version>1.0</version>
  </parent>
  
  <artifactId>webapp</artifactId>
  <packaging>war</packaging>
  <version>1.0</version>
  <name>WebstartDemoWebApplication</name>
  <url>http://maven.apache.org</url>

  <description>
    Web-application to demonstrate the WebstartMavenPlugin.
  </description>
  
  
  <organization>
    <name>MyCompany</name>
    <url>http://www.mycompany.org</url>
  </organization>

  <dependencies>
    <dependency>
      <groupId>org.codehaus.mojo.webstart-maven-plugin</groupId>
      <!--groupId>com.sun.java.jnlp</groupId-->
      <artifactId>jnlp-servlet</artifactId>
      <version>1.0-6.0-02_ea_b02-SNAPSHOT</version>
      <scope>runtime</scope>
    </dependency>
    
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
  
  <build>
    <plugins>
        <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>webstart-maven-plugin</artifactId>
            <version>testing</version>
            <executions>
                <execution>
                    <phase>process-resources</phase>
                    <goals>
                        <goal>jnlp-download-servlet</goal>
                    </goals>
                </execution>
            </executions>

            <configuration>
                <outputDirectoryName>webstart</outputDirectoryName>
                <jnlpFiles>
                    <jnlpFile>
                        <templateFilename>jnlpTemplate.vm</templateFilename>
                        <outputFilename>launch1.jnlp</outputFilename> <!-- when there's only one jnlpFile, can be optioanl and defaults to launch.jnlp -->
                        <jarResources>
                            <jarResource>
                                <groupId>org.codehaus.mojo.webstart.it003</groupId>
                                <artifactId>hello-world</artifactId>
                                <version>1.0</version>
                                <mainClass>org.mycompany.webstart.HelloWorld</mainClass>
                            </jarResource>
                        </jarResources>
                    </jnlpFile>
                    <jnlpFile>
                        <templateFilename>jnlpTemplate.vm</templateFilename>
                        <outputFilename>launch2.jnlp</outputFilename>
                        <jarResources>
                            <jarResource>
                                <groupId>org.codehaus.mojo.webstart.it003</groupId>
                                <artifactId>hello-world</artifactId>
                                <version>1.0</version>
                                <mainClass>org.mycompany.webstart.HelloWorld</mainClass>
                            </jarResource>
                        </jarResources>
                    </jnlpFile>
                </jnlpFiles>

                <sign>
                    <keystore>${project.build.directory}/keyStore</keystore> <!-- path or URI (if empty, the default keystore ".keystore"-file in the user-homedir is used) -->
                    <keypass>password</keypass>  <!-- we need to override passwords easily from the command line. ${keypass} -->
                    <storepass>password</storepass> <!-- ${storepass} -->
                    <alias>webstart</alias> <!-- alias of the key to  use -->

                    <!-- the following key-settings are only used if the keystore and key has to be generated at build-time -->
                    <!--storetype>jks</storetype>
                    <validity>365</validity>
                    <dnameCn>Firstname Lastname</dnameCn>
                    <dnameOu>OrganisationalUnit</dnameOu>
                    <dnameO>Organisation</dnameO>
                    <dnameL>Location</dnameL>
                    <dnameSt>State</dnameSt>
                    <dnameC>CountryCode</dnameC-->

                    <!-- KEYSTORE MANGEMENT -->
                    <keystoreConfig>
                        <delete>true</delete> <!-- delete the keystore at build time -->
                        <gen>true</gen>       <!-- generate keystore and key at build time -->
                    </keystoreConfig>

                    <verify>false</verify> <!-- verify the signature after signing -->
                </sign>
                <unsign>true</unsign> <!-- unsign already signed packages and sign them with own key -->

                <verifyjar>false</verifyjar>
            </configuration>
        </plugin>
      </plugins>
            
    <finalName>webapp</finalName>
  </build>
</project>

-------------------------------

Misc

* Upcoming changes

  * {{{http://jira.codehaus.org/browse/MWEBSTART-58} support for generating multiple bundles from one jnlp project}} (similar to what the jnlp download servlet does).

* Reported missing features

   * {{{http://jira.codehaus.org/browse/MWEBSTART-25} a mojo for deploying the bundles to a remote server}}

   * {{{http://jira.codehaus.org/browse/MWEBSTART-24} a mojo for running the application}}

   * More control on the dependencies: {{{http://jira.codehaus.org/browse/MWEBSTART-72} JarResource exclusions}} and {{{http://jira.codehaus.org/browse/MWEBSTART-90} control of the transitivity}}

   * more support for standalone webstart apps (e.g. download.html/index.html)

   * handling of {{{http://jira.codehaus.org/browse/MWEBSTART-8} native libraries}}

* Other ideas

   * building multiple jnlp app in one zip using one m2 project?? (not sure as this is not a very maven way of doing things)

      * would require merging version.xml

   * what about deploying multiple versions of the same app? Is that ever wanted, e.g. for upgrades?

   * ?? add a new goal to help deal with web applications

      * one step war+webstart generation (one project, webstart plugin used in pre-package phase)

      * more war integration (jnlp, web.xml)

