 ------
 Maven Webstart Plugin
 ------
 Jerome Lacoste
 ------
 26 Oct 2005
 ------

Maven Webstart Plugin

 A plugin to prepare webstart applications. The current plugin has a single goal {{{jnlp-mojo.html} webstart:jnlp}}
 whose responsibility is to create a zip file which contains:
 
   * A jnlp file to be fetched and understood by Sun's webstart client.

   * A digitally signed version of the jar artifact produced by the project
     that has the webstart plugin activated.

   * Digitally signed jar files for each of the transitive dependencies that are part
     of the runtime classpath. The runtime classpath is calculated by Maven using the
     dependencies that you have declared within the project.
     
   * Optionally Pack200 gzip versions of all the jar files. These become useful
     if the user chooses to host the webstart application on a servlet container
     and chooses to use the JnlpDownloadServlet.
     
   * Icon image files used by the user's webstart client to represent your webstart application.
     
 Common use cases detailing what you might do with the zip file are detailed in
 this document. However, it's important to understand that the goal's responsibility
 ends at the creation of the zip file.

 Note: this is a very early but working release. It requires maven 2 (version 2.0.1 and further) to work correctly.

 More information can be found {{{http://docs.codehaus.org/display/MOJO/Webstart+Plugin} on confluence}}.



Features:

   * jnlp file generation where information is inserted into a user
     defined {{{http://jakarta.apache.org/velocity/} Velocity template}}

   * transitive dependencies
   
      * possibilities to include/exclude dependencies

   * key generation (thanks to the {{{http://mojo.codehaus.org/keytool-maven-plugin/} keytool-maven-plugin}})

   * jar signing and signing verification

   * pack200 support for compressed versions of the jar files resulting in
     faster network downloads of your webstart application.



Planned & missing features

   * pluggable API for jar signer

   * more support for standalone webstart apps (e.g. download.html/index.html)

   * handling of native libraries

   * ability to launch the application

   * building multiple jnlp app in one zip using one m2 project?? (not sure as this is not a very maven way of doing things)

      * would require merging version.xml

   * what about deploying multiple versions of the same app? Is that ever wanted, e.g. for upgrades?

   * ?? add a new goal to help deal with web applications

      * one step war+webstart generation (one project, webstart plugin used in pre-package phase)

      * more war integration (jnlp, web.xml)

 The plugin can be used to prepare standalone webstart applications or webstart app bundled in war files.


Input/Output

  Here are the list of files/directories you might want to be familiar with before starting to use the plugin.

-------------------------------
  pom.xml                    (configures the webstart plugin)
  src/jnlp/template.vm       (template for the jnlp file to be generated.)
  src/jnlp/resources/        (location where all resources are taken. All contents are copied into the work directory)

  target/jnlp/               (work directory)
  target/jnlp/launch.jnlp    (generated jnlp file. Name is configurable, this is the default)
  target/${artifactId}-${version}.zip (zipped version of the work directory that will be installed in your local repository)
-------------------------------


Recommended work directory layout

  Mostly taken from {{{http://java.sun.com/j2se/1.5.0/docs/guide/javaws/developersguide/downloadservletguide.html} JnlpDownloadServlet guide}}.

-------------------------------
launch.jnlp (may require variable expansion)
application.jar
lib.jar (lib)
version.xml
images/icon.gif
-------------------------------



Functionning

  When invoked the JnlpMojo will:

  * the webstart plugin works with a project of type pom. It does the following work:

  ** creates the work directory

  ** copy the resources

  ** copy the jars marked as dependencies into the working directory (if necessary)

  ** sign the jars using an existing (or on-the-fly created) keystore file

  ** if required, use pack200 algorithm to create packed and packed gzipped versions of the jars

  ** generates a jnlp file

  * in the future, it may also generate other files: version.xml, index.html,...

  * the plugin creates a zip out of the resulting files (if we are inside a war packaging, we could do the things automatically)

  * if one needs to package several webstart projects together into a bigger webapp, one should create a particular assembly project. Adding the jnlp-servlet should be done there.


JNLP file generation

    Thanks to velocity we parse the template without affecting things that are intended to work with the jnlp-servlet (e.g. $$codebase).
    The following values are parsed:

-------------------------------
$dependencies
$mainClass
$outputFile      from user input if specified, default otherwise (one can use $$name when using the JnlpDownloadServlet)
-------------------------------

  Note: that the template generation doesn't know if a placeholder was not replaced. So if you put a $outputFile in
  your velocity template, but forget to specify the <outputFile> element in your plugin configuration in the pom.xml,
  there won't (currently) be a failure.


Plugin configuration

  Here's a full example of a pom used to generate a webstart application.

-------------------------------
<!-- Test war project which signs a dependency and it's runtime dependencies. -->
<project>
  <modelVersion>4.0.0</modelVersion>
  <artifactId>jar-mng-1130-1</artifactId>
  <groupId>org.apache.maven.plugins</groupId>
  <version>1.0</version>
  <packaging>pom</packaging>
  <name>Test Case for MNG-1130</name>
  <build>
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>webstart-maven-plugin</artifactId>
        <executions>
           <execution>
              <goals>
                 <goal>jnlp</goal>
              </goals>
           </execution>
        </executions>
        <configuration>
           <!--outputDirectory></outputDirectory--> <!-- not required?? -->

           <!-- transitive dependencies filter -->
           <dependencies>
             <includes>
                <include>commons-logging:commons-logging</include>
                <include>commons-cli:commons-cli</include>
             <includes>
             <!-- excludes>
                <exclude></exclude>
             <excludes-->
           </dependencies>

           <!-- JNLP generation -->
           <jnlp>
             <!--inputTemplate>src/jnlp/template.vm</inputTemplate-->
             <outputFile>app.jnlp</outputFile> <!-- defaults to launch.jnlp -->

             <!-- used to automatically identify the jar containing the dependency. (note: slightly broken today) -->
             <!-- this is going to change -->
             <mainClass>org.apache.commons.cli.BasicParser</mainClass>
           </jnlp>


           <!-- SIGNING -->
           <!-- defining this will automatically sign the jar and its dependencies, if necessary -->
           <sign>
             <keystore></keystore>
             <keypass></keypass>  <!-- we need to override passwords easily from the command line. ${keypass} -->
             <storepass></storepass> <!-- ${storepass} -->
             <storetype></storetype>
             <alias></alias>
             <validity></validity>

             <dname.cn></dname.cn>
             <dname.ou></dname.ou>
             <dname.o></dname.o>
             <dname.l></dname.l>
             <dname.st></dname.st>
             <dname.c></dname.c>

             <verify>true</verify>
           </sign>

           <!-- KEYSTORE MANGEMENT. do we want that? -->
           <keystore>
             <delete>true</delete> <!-- delete the keystore -->
             <gen>true</gen>       <!-- optional shortcut to generate the store. -->
           </keystore>

           <!-- BUILDING PROCESS -->
           <!--usejnlpservlet>true</usejnlpservlet--> <!-- not yet supported -->

           <!-- should we have some more configurations here? E.g. compression level (aka packing effort) -->
           <!-- not yet implemented -->
           <pack200>true</pack200>
           <gzip>true</gzip> <!-- default force when pack200 false, true when pack200 selected ?? -->

           <!-- misc -->
           <!-- if there are multiple apps, do we need to mark one as default? (app/ redirects to app/default.jnlp in jnlp servlet ??)-->
           <!-- -->

           <!--install>false</install--> <!-- not yet supported -->
           <verbose>true</verbose>

        </configuration>
      </plugin>
    </plugins>
  </build>
  <dependencies>
    <dependency>
      <groupId>commons-logging</groupId>
      <artifactId>commons-logging</artifactId>
      <version>1.0.4</version>
    </dependency>
    <dependency>
      <groupId>commons-cli</groupId>
      <artifactId>commons-cli</artifactId>
      <version>1.0</version>
    </dependency>
  </dependencies>
</project>
-------------------------------



Use Cases

* single webstart app, no webapp (static web site)

  Use the plugin as described above. It will generate and install a zip in your local repository.

* single and multiple webstart app, bundle inside a 'pom project', without jnlp-servlet support

** One way of doing it


   * Place your webstart application in a project. This project uses the webstart
     plugin to generate the zip file containing the webstart bundle. The bundle is
     installed in the local repository.

   * The webapp is maintained in a separate project, the artifact that this project
     produces is a war file.

   * Use the Codehaus dependency plugin in your webapp project to unpack the webstart
     bundle into the webapp folder. The webstart application will then be bundled
     and deployed onto your webserver as part of the webapp.
      
   * You can deploy multiple webstart applications into the same webapp by using
     multiple executions of the dependency plugin.

  E.g.

-------------------------------
jnlp-project1/pom.xml - pom packaging. Uses webstart plugin to package the generated files into a zip
jnlp-project2/pom.xml - pom packaging. Uses webstart plugin to package the generated files into another zip
webapp-bundle/pom.xml - war packaging. Unpack zips and bundle war.
-------------------------------

 Placing this plugin configuration inside the pom.xml that generates your webapp's war
 file will result in your webstart application being placed in the /webstart directory
 of your web application.

-------------------------------
    <build>
        <plugins>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>dependency-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <!-- 
                            Copy the webstart bundle in as a resource
                            before packaging starts.
                        -->
                        <phase>process-resources</phase>
                        <goals>
                            <goal>unpack</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <artifactItems>
                        <artifactItem>
                            <groupId>your webstart artifact's groupId</groupId>
                            <artifactId>your webstart artifact's artifactId</artifactId>
                            <version>your webstart artifact's version (possibly SNAPSHOT)</version>
                            <type>zip</type>                            
                        </artifactItem>
                    </artifactItems>
                    <outputDirectory>${project.build.directory}/${project.build.finalName}/webstart</outputDirectory>
                </configuration>
            </plugin>
        </plugins>
    </build>
-------------------------------


** Another way way of doing it

    * place each of your webstart app in a particular project

    * use webstart plugin as shown above to generate and install the zip in the local repository

    * generate your webapp using a project with war packaging

    * use a project to combine the war + n zip files

  E.g.

-------------------------------
jnlp-project1/pom.xml - pom packaging. Uses webstart plugin to package the generated files into a zip
jnlp-project2/pom.xml - pom packaging. Uses webstart plugin to package the generated files into another zip
webapp/pom.xml        - war packaging. Creates a war file.
webapp-bundle/pom.xml - pom packaging. Uses user defined assembly to combines the jnlp-project* resulting zip and the war into its own war.
-------------------------------

  In webapp-bundle:

-------------------------------
<?xml version="1.0"?>
<project>
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>yourproject</groupId>
    <artifactId>project-parent</artifactId>
    <version>1.0-SNAPSHOT</version>
  </parent>
  <artifactId>full-webapp</artifactId>
  <packaging>pom</packaging>
  <name>Project Full WebApp</name>
  <description>Webapp + Webstart Clients</description>
  <dependencies>

    <dependency>
      <groupId>yourproject</groupId>
      <artifactId>webapp</artifactId>
      <version>${version}</version>
      <type>war</type>
    </dependency>

    <dependency>
      <groupId>yourproject</groupId>
      <artifactId>clients-webstart-1</artifactId>
      <version>${version}</version>
      <type>zip</type>
    </dependency>

    <dependency>
      <groupId>yourproject</groupId>
      <artifactId>clients-webstart-2</artifactId>
      <version>${version}</version>
      <type>zip</type>
    </dependency>

    <dependency> <!-- required to support MNG-1274 -->
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-archiver</artifactId>
      <version>1.0-alpha-4-SNAPSHOT</version>
    </dependency>

  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-assembly-plugin</artifactId>
        <version>2.1-SNAPSHOT</version>
        <executions>
           <execution>
             <phase>verify</phase> <!-- FIXME should be package, but inifinte loop see MNG-1311 -->
             <goals><goal>assembly</goal></goals>
           </execution>
        </executions>
        <configuration>
          <descriptor>src/assemble/main.xml</descriptor>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>
-------------------------------

  and

-------------------------------
<assembly>
  <id>main</id>
  <formats>
    <format>war</format>
  </formats>
  <includeBaseDirectory>false</includeBaseDirectory>
  <dependencySets>
    <dependencySet>
      <outputDirectory>/</outputDirectory>
      <includes>
        <include>yourproject:webapp</include>
      </includes>
      <unpack>true</unpack>
      <scope>runtime</scope>
    </dependencySet>
    <dependencySet>
      <outputDirectory>ws1</outputDirectory>
      <includes>
        <include>yourproject:clients-webstart-1</include>
      </includes>
      <unpack>true</unpack>
      <scope>runtime</scope>
    </dependencySet>
    <dependencySet>
      <outputDirectory>ws1</outputDirectory>
      <includes>
        <include>yourproject:clients-webstart-2</include>
      </includes>
      <unpack>true</unpack>
      <scope>runtime</scope>
    </dependencySet>
    <!--dependencySet> NOT YET IN IBIBLIO
      <outputDirectory>WEB-INF/lib</outputDirectory>
      <includes>
        <include>com.sun.java.jnlp:jnlp-servlet</include>
      </includes>
      <scope>runtime</scope>
    </dependencySet-->
  </dependencySets>
</assembly>
-------------------------------


* single and multiple webstart app, bundle inside a 'war project', without jnlp-servlet support

** One way of doing it:

    * place each of your webstart app in a particular project

    * use webstart plugin as shown above to generate and install the zip in the local repository

    * generate your webapp using a project with war packaging, but be sure to unzip the webstart applications zip in the webstart working directory.
      I've not implemented this. I don't think it is possible to use the assembly plugin without specifying any format. So not sure how the layout preparation would work

  E.g.

-------------------------------
jnlp-project1/pom.xml - pom packaging. Uses webstart plugin to package the generated files into a zip
jnlp-project2/pom.xml - pom packaging. Uses webstart plugin to package the generated files into another zip
webapp/pom.xml        - war packaging. Creates a war file after unzipping the zips in the correct place.
-------------------------------

* Configuring your webapp to use JnlpDownloadServlet

 The JnlpDownloadServlet jar file is provided with the Java 5.0 distribution in the
 examples directory.
 
 The JnlpDownloadServlet offers some advantages:
 
   * $$codebase, $$context and $$name tokens in your jnlp file are replaced with values
     that represent where your jnlp file is hosted. This allows you to deploy your
     web application anywhere without modification. The relevant paths will be worked
     out at runtime.
     
   * If you have chosen to provide Pack200 format compressed files, JnlpDownloadServlet
     will decide if the webstart client that the user has chosen can handle the compressed
     format. If the client is compatable, the JnlpDownloadServlet will route requests for
     jar files to the appropriate compressed file. This may improve the download time of
     your application.
 
 To use the JnlpDownloadServlet you must declare a dependency on it in the webapp's
 pom.xml and you must make modifications to your webapp's web.xml file.
 
 Here is an example of a web.xml with the JnlpDownladServlet enabled. All requests to
 files ending in .jnlp are routed through the download servlet. More information and
 examples are availabe in the JnlpDownloadServlet's documentation.
 
-------------------------------
<!DOCTYPE web-app PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN" "http://java.sun.com/dtd/web-app_2_3.dtd">

<web-app>
    <servlet>
        <servlet-name>JnlpDownloadServlet</servlet-name>
        <servlet-class>jnlp.sample.servlet.JnlpDownloadServlet</servlet-class>
    </servlet>
    
    <servlet-mapping>
        <servlet-name>JnlpDownloadServlet</servlet-name>
        <url-pattern>*.jnlp</url-pattern>
    </servlet-mapping>
</web-app>
-------------------------------
 
 Note: This dependency is to be placed in the webapp's pom.xml. This has nothing
 to do with the webstart project's pom.xml.
 
 Unfortunately, the JnlpDownloadServlet's jar file is not yet available in the
 public ibiblio.org/maven2 repository. Until the licensing issues are worked out,
 you'll need to keep a copy of the jar file in your own remote repository or
 install the package in your local repository.
 
-------------------------------
<!-- 
    Sun's JnlpDownladServlet takes the template jnlp file and inserts
    relevant values for $$codebase and other parameters
-->
<dependency>
    <groupId>com.sun.java.jnlp</groupId>
    <artifactId>jnlp-servlet</artifactId>
    <version>5.0</version>
    <scope>runtime</scope>
</dependency>
-------------------------------
